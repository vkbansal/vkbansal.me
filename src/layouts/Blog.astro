---
import type { MarkdownContent } from 'astro';
import { format, parseISO } from 'date-fns';

import type { MyPostInstance, PostFrontMatter } from 'utils/types';
import { getPrevAndNextPosts } from 'utils/posts-helpers';

import MainLayout from './MainLayout.astro';

export interface Props {
	content: MarkdownContent<PostFrontMatter>;
}

const allPosts = await Astro.glob<MyPostInstance>('../pages/blog/**/*.mdx');

const {
	content: { title, date },
} = Astro.props as Props;

const formattedDate = format(parseISO(date), 'MMMM do yyyy');
const [previousPost, nextPost] = getPrevAndNextPosts(allPosts, Astro.url.pathname);
---

<MainLayout>
	<div class="container blog-post">
		<nav class="breadcrumb" aria-label="breadcrumbs">
			<ul>
				<li><a href="/">üè†</a></li>
				<li><a href="/blog/">Blog</a></li>
				<li class="is-active"><a href="#" aria-current="page" set:html={title}></a></li>
			</ul>
		</nav>
		<section class="content">
			<h1 set:html={title}></h1>
			<div class="date">
				<p>Published at {formattedDate}</p>
				<!-- {# <p>Author: {% if author.website %} <a href="{{ author.website }}" target="_blank" rel="noopener noreferrer">{{ author.name }}</a> {% else %} {{ author.name }} {% endif %}</p> #} -->
			</div>
			<slot />
		</section>
		<nav class="post-pagination" role="navigation" aria-label="pagination">
			{previousPost ? (
				<a class="prev-post" href={previousPost.url}>
					<span class="hint">&larr; Previous Post</span>
					<span set:html={previousPost.frontmatter.title} />
				</a>
			) : (
				<span />
			)}
			{nextPost ? (
				<a class="next-post" href={nextPost.url}>
					<span class="hint">Next Post &rarr;</span>
					<span set:html={nextPost.frontmatter.title} />
				</a>
			) : (
				<span />
			)}
		</nav>
	</div>
</MainLayout>
