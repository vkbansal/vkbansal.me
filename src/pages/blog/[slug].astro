---
import path from 'node:path';
import type { GetStaticPathsOptions, GetStaticPathsItem } from 'astro';
import { format, parseISO } from 'date-fns';

import { AUTHOR, CODE_REPOSITORY } from 'site-config';
import MainLayout from 'layouts/MainLayout.astro';
import Breadcrumbs from 'components/Breadcrumbs.astro';
import type { PostFrontMatter, MyPostInstance } from 'utils/types';
import { processPosts } from 'utils/posts-helpers';
import Tags from 'components/Tags.astro';

export interface BlogProps {
	post: MyPostInstance;
	prevPost?: MyPostInstance;
	nextPost?: MyPostInstance;
}

type GetStaticPathsResult = Omit<GetStaticPathsItem, 'props'> & { props: BlogProps };

export async function getStaticPaths(opt: GetStaticPathsOptions): Promise<GetStaticPathsResult[]> {
	const allPosts = await Astro.glob<PostFrontMatter>('../../posts/**/*.md');
	const sortedPosts = processPosts(allPosts);

	return sortedPosts.map((post, i) => {
		return {
			params: { slug: post.slug },
			props: { post, prevPost: sortedPosts[i + 1], nextPost: sortedPosts[i - 1] },
		};
	});
}

const { post, prevPost, nextPost } = Astro.props as BlogProps;
const formattedDate = format(parseISO(post.frontmatter.date), 'do MMMM yyyy');
const content = await post.compiledContent();
const githubLink = CODE_REPOSITORY + 'tree/main/' + path.relative(process.cwd(), post.file);
---

<MainLayout>
	<div class="blog-post">
		<Breadcrumbs
			links={[
				{ label: 'Blog', link: '/blog/' },
				{ label: post.frontmatter.title, link: post.url },
			]}
		/>
		<h1 set:html={post.frontmatter.title}></h1>
		<div class="metadata">
			<p class="author">{AUTHOR.name}</p>
			<p>{formattedDate}</p>
		</div>
		<div set:html={content}></div>
		<Tags tags={post.frontmatter.tags} />
		<p class="other-links">
			<a href={githubLink} target="_blank" rel="noopener noreferrer">Edit on GitHub</a>
		</p>
		<nav class="post-pagination" role="navigation" aria-label="pagination">
			{prevPost ? (
				<a class="prev-post" href={prevPost.url}>
					<span class="hint">&larr; Previous Post</span>
					<span class="title" set:html={prevPost.frontmatter.title} />
				</a>
			) : (
				<span />
			)}
			{nextPost ? (
				<a class="next-post" href={nextPost.url}>
					<span class="hint">Next Post &rarr;</span>
					<span class="title" set:html={nextPost.frontmatter.title} />
				</a>
			) : (
				<span />
			)}
		</nav>
	</div>
</MainLayout>

<style lang="scss">
	.blog-post {
		max-width: var(--max-post-width);
		margin: 0 auto 4rem auto;

		h1 {
			margin-top: 1rem;
		}

		.metadata {
			display: flex;
			color: var(--text-light);
			font-size: 0.85rem;
			gap: 0.5em;

			& > p {
				display: flex;
				align-items: center;
				gap: 0.5em;

				&:not(:last-child)::after {
					content: '';
					display: block;
					width: 0.25em;
					height: 0.25em;
					background-color: currentColor;
					border-radius: 50%;
				}
			}

			.author {
				font-weight: 500;
			}
		}

		.other-links {
			margin: 1rem 0;
		}

		.post-pagination {
			display: flex;
			align-items: stretch;
			justify-content: space-between;
			gap: 1rem;
			margin: 2rem 0 0 0;

			& a {
				text-decoration: none;
				display: flex;
				flex-direction: column;
				padding: 1rem;
				border: 1px solid var(--border);
				border-radius: 0.5rem;
				color: var(--text-light);
				max-width: 50%;

				&:hover {
					background-color: var(--border-light);
				}
			}

			.hint {
				color: var(--text-light);
				opacity: 0.8;
			}

			.title {
				font-weight: 500;
			}

			.prev-post {
				align-items: flex-start;
			}

			.next-post {
				align-items: flex-end;
			}
		}

		:global(.image) {
			margin: 1rem 0;

			&:global(.center) {
				margin: 1rem auto;
			}
		}

		[data-theme='dark'] & :global(.image.invert) {
			filter: invert(1);
		}
	}
</style>
