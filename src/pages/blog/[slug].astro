---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

import type { GetStaticPathsItem } from 'astro';
import dayjs from 'dayjs';
import { decode } from 'html-entities';
import readingTime from 'reading-time';

import Breadcrumbs from '$/components/Breadcrumbs.astro';
import Tags from '$/components/Tags.astro';
import MainLayout from '$/layouts/MainLayout.astro';
import { AUTHOR, CODE_REPOSITORY } from '$/site-config';
import { filterPostsCollection, postSlugToURL, sortPostsCollection } from '$/utils/helpers';

export interface BlogProps {
	post: CollectionEntry<'posts'>;
	prevPost: CollectionEntry<'posts'> | undefined;
	nextPost: CollectionEntry<'posts'> | undefined;
}

type GetStaticPathsResult = Omit<GetStaticPathsItem, 'props'> & { props: BlogProps };

export async function getStaticPaths(): Promise<GetStaticPathsResult[]> {
	const blogEntries = await getCollection('posts', filterPostsCollection);
	sortPostsCollection(blogEntries);

	return blogEntries.map((post, i) => {
		const prevPost = blogEntries[i + 1];
		const nextPost = blogEntries[i - 1];

		return {
			params: { slug: post.slug.split('/').slice(1).join('/') },
			props: { post, prevPost, nextPost },
		};
	});
}

const { post, prevPost, nextPost } = Astro.props as BlogProps;
const formattedDate = dayjs(post.data.date).format('MMMM DD, YYYY');
const { Content } = await post.render();
const githubLink = `${CODE_REPOSITORY}tree/main/src/content/posts/${post.id}`;
const readingStats = readingTime(post.body);
const decodedTitle = decode(post.data.title);
---

<MainLayout title={decodedTitle} description={post.data.description}>
	<div class="blog-post">
		<Breadcrumbs
			links={[
				{ label: 'Blog', link: '/blog/' },
				{ label: post.data.title, link: postSlugToURL(post.slug) },
			]}
		/>
		<h1 transition:name={`post:${post.slug}`} set:html={post.data.title} />
		<div transition:name={`metadata:${post.slug}`} class="metadata">
			<p class="author">{AUTHOR.name}</p>
			<p>{formattedDate}</p>
			<p>{readingStats.text}</p>
		</div>
		<Content />
		<Tags transition:name={`tags:${post.slug}`} tags={post.data.tags} />
		<p class="other-links">
			<a href={githubLink} target="_blank" rel="noopener noreferrer">Edit on GitHub</a>
		</p>
		<nav class="post-pagination" role="navigation" aria-label="pagination">
			{
				prevPost ? (
					<a class="prev-post" href={postSlugToURL(prevPost.slug)}>
						<span class="hint">&larr; Previous Post</span>
						<span class="title" set:html={prevPost.data.title} />
					</a>
				) : (
					<span />
				)
			}
			{
				nextPost ? (
					<a class="next-post" href={postSlugToURL(nextPost.slug)}>
						<span class="hint">Next Post &rarr;</span>
						<span class="title" set:html={nextPost.data.title} />
					</a>
				) : (
					<span />
				)
			}
		</nav>
	</div>
</MainLayout>

<style lang="scss">
	.blog-post {
		max-width: var(--max-post-width);
		margin: 0 auto 4rem auto;

		& :global(h1) {
			margin-top: 1rem;
		}

		& :global(p) {
			line-height: 1.75;
		}

		& .metadata {
			display: flex;
			color: var(--text-light);
			font-size: 0.85rem;
			gap: 0.5em;

			& > p {
				display: flex;
				align-items: center;
				gap: 0.5em;

				&:not(:last-child)::after {
					content: '';
					display: block;
					width: 0.25em;
					height: 0.25em;
					background-color: currentColor;
					border-radius: 50%;
				}
			}

			.author {
				font-weight: 500;
			}
		}

		.other-links {
			margin: 1rem 0;
		}

		.post-pagination {
			display: flex;
			align-items: stretch;
			justify-content: space-between;
			gap: 1rem;
			margin: 2rem 0 0 0;

			& a {
				text-decoration: none;
				display: flex;
				flex-direction: column;
				padding: 1rem;
				border: 1px solid var(--border);
				border-radius: 0.5rem;
				color: var(--text-light);
				max-width: 50%;

				&:hover {
					background-color: var(--border-light);
				}
			}

			.hint {
				color: var(--text-light);
				opacity: 0.8;
			}

			.title {
				font-weight: 500;
			}

			.prev-post {
				align-items: flex-start;
			}

			.next-post {
				align-items: flex-end;
			}
		}

		:global(.image) {
			margin: 1rem 0;

			&:global(.center) {
				margin: 1rem auto;
			}
		}

		[data-theme='dark'] & :global(.image.invert) {
			filter: invert(1);
		}
	}
</style>
