---
import { times } from 'utils/helpers';

export interface Props {
	totalPages: number;
	currentPage: number;
	groupSize?: number;
	offsetGroupSize?: number;
	getLink: (n: number) => string;
}

const {
	totalPages,
	currentPage,
	getLink,
	groupSize = 3,
	offsetGroupSize = 1,
} = Astro.props as Props;
const moreLeft = currentPage > groupSize;
const moreRight = totalPages - currentPage >= groupSize;
---

<nav class="pagination-list">
	<a
		class="nav-link"
		href={getLink(currentPage - 1)}
		aria-disabled={currentPage === 1 ? true : undefined}
		>&larr; Prev
	</a>
	<div class="pagination">
		{totalPages > 1 ? (
			<Fragment>
				{totalPages <= groupSize + 2 * offsetGroupSize ? (
					<Fragment>
						{times(totalPages, (i) => {
							const page = i + 1;
							return (
								<a
									class:list={['nav-link', { 'nav-active': page === currentPage }]}
									href={getLink(page)}
								>
									{page}
								</a>
							);
						})}
					</Fragment>
				) : (
					<Fragment>
						{moreLeft ? (
							<Fragment>
								{times(offsetGroupSize, (i) => {
									const page = i + 1;
									return (
										<a
											class:list={['nav-link', { 'nav-active': page === currentPage }]}
											href={getLink(page)}
										>
											{page}
										</a>
									);
								})}
								<span class="pagination-ellipsis">&hellip;</span>
							</Fragment>
						) : (
							<Fragment>
								{times(offsetGroupSize + groupSize, (i) => {
									const page = i + 1;
									return (
										<a
											class:list={['nav-link', { 'nav-active': page === currentPage }]}
											href={getLink(page)}
										>
											{page}
										</a>
									);
								})}
							</Fragment>
						)}
						{moreLeft && moreRight ? (
							<Fragment>
								{times(groupSize, (i) => {
									const page = i + currentPage - Math.floor(groupSize / 2);
									return (
										<a
											class:list={['nav-link', { 'nav-active': page === currentPage }]}
											href={getLink(page)}
										>
											{page}
										</a>
									);
								})}
							</Fragment>
						) : null}
						{moreRight ? (
							<Fragment>
								<span class="pagination-ellipsis">&hellip;</span>
								{times(offsetGroupSize, (i) => {
									const page = i + totalPages;
									return (
										<a
											class:list={['nav-link', { 'nav-active': page === currentPage }]}
											href={getLink(page)}
										>
											{page}
										</a>
									);
								})}
							</Fragment>
						) : (
							<Fragment>
								{times(offsetGroupSize + groupSize, (i) => {
									const page = i + totalPages - groupSize;
									return (
										<a
											class:list={['nav-link', { 'nav-active': page === currentPage }]}
											href={getLink(page)}
										>
											{page}
										</a>
									);
								})}
							</Fragment>
						)}
					</Fragment>
				)}
			</Fragment>
		) : null}
	</div>
	<a
		class="nav-link"
		href={getLink(currentPage + 1)}
		aria-disabled={currentPage === totalPages ? true : undefined}
		>Next &rarr;
	</a>
</nav>

<style lang="scss">
	.pagination-list {
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin: 2rem 0;

		.pagination {
			display: flex;
			align-items: center;
			justify-content: center;
			gap: 0.5rem;

			& :global(.nav-link) {
				width: 2rem;
				height: 2rem;
				display: flex;
				align-items: center;
				justify-content: center;

				&:global(.nav-active) {
					pointer-events: none;
				}
			}
		}
	}
</style>
